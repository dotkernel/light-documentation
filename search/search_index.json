{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"../../README.md","title":"Home"},{"location":"#readmemd","text":"","title":"../../README.md"},{"location":"v1/introduction/","text":"Dotkernel light Dotkernel Light is a PSR-15 compliant application (skeleton) using Mezzio microframework and Laminas components. It's designed as a minimal project to generate a simple website, like a presentation site. Read on to find out more about the application: A technical overview to understand technical requirements and included packages A step-by-step installation guide to get you up and running in minutes Detailed how-tos for managing the dynamic content Check out our demo .","title":"Introduction"},{"location":"v1/introduction/#dotkernel-light","text":"Dotkernel Light is a PSR-15 compliant application (skeleton) using Mezzio microframework and Laminas components. It's designed as a minimal project to generate a simple website, like a presentation site. Read on to find out more about the application: A technical overview to understand technical requirements and included packages A step-by-step installation guide to get you up and running in minutes Detailed how-tos for managing the dynamic content Check out our demo .","title":"Dotkernel light"},{"location":"v1/how-tos/create-pages/","text":"Creating pages Register the page route Open config/autoload/local.php and locate the routes key. Under the page key you will find an associative array with a couple of already existing routes. You create a new route by appending a new line to that array: 'example-page' =&gt; 'example-template', The array key is the page slug, the array value is the template name used by that page. In order to be displayed this new example-template needs to be added to the website's navigation area. To do this, open src/App/templates/layout/default.html.twig , locate the ul inside the div with id navbarHeader and append the below code to it: &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"{{ url('page::example-template') }}\"&gt;Example&lt;/a&gt; &lt;/li&gt; The page content Each page has its own template, so the next step is to create the template files in the src/Page/templates/page/ folder. For the example above, the src/Page/templates/page/example-template.html.twig file was created. We won't include the entire code here, just the basic building blocks. The content block is where your page copy goes. {% extends '@layout/default.html.twig' %} {% block title %}Page Title{% endblock %} {% block page_title %}{% endblock %} {% block content %} &lt;div class=\"page-intro\"&gt; &lt;div class=\"container\"&gt; &lt;h2&gt;Add title here!&lt;/h2&gt; &lt;/div&gt; &lt;/div&gt; &lt;div&gt; Add cool content here! &lt;/div&gt; {% endblock %} Grouping templates The default grouping is under the page folder. This item is defined in src/Page/src/ConfigProvider.php in getTemplates() , like seen below. public function getTemplates(): array { return [ 'paths' =&gt; [ 'page' =&gt; [__DIR__ . '/../templates/page'], ], ]; } If you intend to group your templates into more folders, simply add another element under paths . It's not necessary to match the key name with the folder name. public function getTemplates(): array { return [ 'paths' =&gt; [ 'page' =&gt; [__DIR__ . '/../templates/page'], 'how-tos' =&gt; [__DIR__ . '/../templates/how-tos'], 'info' =&gt; [__DIR__ . '/../templates/data'], ], ]; } Accessing the page The url for the new page in this example is /page/example-page .","title":"Create Pages"},{"location":"v1/how-tos/create-pages/#creating-pages","text":"","title":"Creating pages"},{"location":"v1/how-tos/create-pages/#register-the-page-route","text":"Open config/autoload/local.php and locate the routes key. Under the page key you will find an associative array with a couple of already existing routes. You create a new route by appending a new line to that array: 'example-page' =&gt; 'example-template', The array key is the page slug, the array value is the template name used by that page. In order to be displayed this new example-template needs to be added to the website's navigation area. To do this, open src/App/templates/layout/default.html.twig , locate the ul inside the div with id navbarHeader and append the below code to it: &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"{{ url('page::example-template') }}\"&gt;Example&lt;/a&gt; &lt;/li&gt;","title":"Register the page route"},{"location":"v1/how-tos/create-pages/#the-page-content","text":"Each page has its own template, so the next step is to create the template files in the src/Page/templates/page/ folder. For the example above, the src/Page/templates/page/example-template.html.twig file was created. We won't include the entire code here, just the basic building blocks. The content block is where your page copy goes. {% extends '@layout/default.html.twig' %} {% block title %}Page Title{% endblock %} {% block page_title %}{% endblock %} {% block content %} &lt;div class=\"page-intro\"&gt; &lt;div class=\"container\"&gt; &lt;h2&gt;Add title here!&lt;/h2&gt; &lt;/div&gt; &lt;/div&gt; &lt;div&gt; Add cool content here! &lt;/div&gt; {% endblock %}","title":"The page content"},{"location":"v1/how-tos/create-pages/#accessing-the-page","text":"The url for the new page in this example is /page/example-page .","title":"Accessing the page"},{"location":"v1/how-tos/edit-footer/","text":"Footer To edit the footer on all the pages, search for &lt;footer class=\"app-footer\"&gt; in the src/App/templates/layout/default.html.twig template. The content is usually basic HTML and CSS with twig . Below is an example of a footer that groups urls under two categories and columns. It also contains the copyright row. &lt;footer class=\"app-footer\"&gt; &lt;div class=\"container container-border\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-9\"&gt; &lt;div class=\"footer_head\"&gt; &lt;h2&gt;Category 1&lt;/h2&gt; &lt;/div&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-6 dk_widget\"&gt; &lt;p class=\"footer-item-title\"&gt; Column 1 &lt;/p&gt; &lt;p class=\"footer-item-link margin-small\"&gt; &lt;a href=\"https://first.example.com/\" target=\"_blank\"&gt; &lt;img src=\"{{ asset('images/app/icon/hand.svg') }}\"&gt; First Link &lt;/a&gt; &lt;/p&gt; &lt;p class=\"footer-item-link margin-small\"&gt; &lt;a href=\"https://second.example.com/\" target=\"_blank\"&gt; &lt;img src=\"{{ asset('images/app/icon/hand.svg') }}\"&gt; Second Link &lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;div class=\"col-md-6 dk_widget\"&gt; &lt;p class=\"footer-item-title\"&gt; Column 2 &lt;/p&gt; &lt;p class=\"footer-item-link margin-large\"&gt; &lt;a href=\"https://third.example.com/\" target=\"_blank\"&gt; &lt;img src=\"{{ asset('images/app/icon/hand.svg') }}\"&gt; Third Link &lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-md-3\"&gt; &lt;div class=\"footer_head\"&gt; &lt;h2&gt;Category 2&lt;/h2&gt; &lt;/div&gt; &lt;p class=\"footer-item-support margin-small\"&gt; &lt;a href=\"https://fourth.example.com/\" target=\"_blank\"&gt; &lt;img src=\"{{ asset('images/app/icon/hand.svg') }}\"&gt; Fourth Link &lt;/a&gt; &lt;/p&gt; &lt;p class=\"footer-item-support margin-small\"&gt; &lt;a href=\"https://fifth.example.com/\" target=\"_blank\"&gt; &lt;img src=\"{{ asset('images/app/icon/hand.svg') }}\"&gt; Fifth Link &lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"row\"&gt; &lt;p class=\"footer-headline\"&gt; © {{ 'now' | date('Y') }} by &lt;a href=\"{{ url('home') }}\"&gt;My Project&lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/footer&gt;","title":"Edit the Footer"},{"location":"v1/how-tos/edit-footer/#footer","text":"To edit the footer on all the pages, search for &lt;footer class=\"app-footer\"&gt; in the src/App/templates/layout/default.html.twig template. The content is usually basic HTML and CSS with twig . Below is an example of a footer that groups urls under two categories and columns. It also contains the copyright row. &lt;footer class=\"app-footer\"&gt; &lt;div class=\"container container-border\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-9\"&gt; &lt;div class=\"footer_head\"&gt; &lt;h2&gt;Category 1&lt;/h2&gt; &lt;/div&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-6 dk_widget\"&gt; &lt;p class=\"footer-item-title\"&gt; Column 1 &lt;/p&gt; &lt;p class=\"footer-item-link margin-small\"&gt; &lt;a href=\"https://first.example.com/\" target=\"_blank\"&gt; &lt;img src=\"{{ asset('images/app/icon/hand.svg') }}\"&gt; First Link &lt;/a&gt; &lt;/p&gt; &lt;p class=\"footer-item-link margin-small\"&gt; &lt;a href=\"https://second.example.com/\" target=\"_blank\"&gt; &lt;img src=\"{{ asset('images/app/icon/hand.svg') }}\"&gt; Second Link &lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;div class=\"col-md-6 dk_widget\"&gt; &lt;p class=\"footer-item-title\"&gt; Column 2 &lt;/p&gt; &lt;p class=\"footer-item-link margin-large\"&gt; &lt;a href=\"https://third.example.com/\" target=\"_blank\"&gt; &lt;img src=\"{{ asset('images/app/icon/hand.svg') }}\"&gt; Third Link &lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-md-3\"&gt; &lt;div class=\"footer_head\"&gt; &lt;h2&gt;Category 2&lt;/h2&gt; &lt;/div&gt; &lt;p class=\"footer-item-support margin-small\"&gt; &lt;a href=\"https://fourth.example.com/\" target=\"_blank\"&gt; &lt;img src=\"{{ asset('images/app/icon/hand.svg') }}\"&gt; Fourth Link &lt;/a&gt; &lt;/p&gt; &lt;p class=\"footer-item-support margin-small\"&gt; &lt;a href=\"https://fifth.example.com/\" target=\"_blank\"&gt; &lt;img src=\"{{ asset('images/app/icon/hand.svg') }}\"&gt; Fifth Link &lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"row\"&gt; &lt;p class=\"footer-headline\"&gt; © {{ 'now' | date('Y') }} by &lt;a href=\"{{ url('home') }}\"&gt;My Project&lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/footer&gt;","title":"Footer"},{"location":"v1/how-tos/edit-top-menu/","text":"Edit the top menu The top menu is displayed on all the pages, in the header. To edit it, go to src/App/templates/layout/default.html.twig and update the items under id=\"navbarHeader\" . You can use the below as an example. &lt;div class=\"menu\" id=\"navbarHeader\"&gt; &lt;ul class=\"navbar-nav mr-auto\"&gt; &lt;li class=\"nav-item dropdown\"&gt; &lt;a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"pageDropdown\" data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"&gt;Grouped Pages&lt;/a&gt; &lt;div class=\"dropdown-menu\" aria-labelledby=\"pageDropdown\"&gt; &lt;a class=\"dropdown-item\" href=\"{{ url('page', {action: 'home'}) }}\"&gt;Home&lt;/a&gt; &lt;a class=\"dropdown-item\" href=\"https://www.example.com/docs\"&gt;Docs&lt;/a&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" target=\"_blank\" href=\"{{ url('page', {action: 'firstLink'}) }}\"&gt;First Link&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" target=\"_blank\" href=\"https://second.example.com/\"&gt;Second Link&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; Each li element is listed as an item in the top menu. There are two different types of elements in the example: The Grouped Pages group several urls. When you click on the item, the elements grouped under it are listed and can be accessed. They can be internal and/or external links. The First Link and Second Link are regular links, one an internal link and the other an external one. You can also replace the nav-item class for the li elements with button-border for a link that looks more like a button.","title":"Edit the Top Menu"},{"location":"v1/how-tos/edit-top-menu/#edit-the-top-menu","text":"The top menu is displayed on all the pages, in the header. To edit it, go to src/App/templates/layout/default.html.twig and update the items under id=\"navbarHeader\" . You can use the below as an example. &lt;div class=\"menu\" id=\"navbarHeader\"&gt; &lt;ul class=\"navbar-nav mr-auto\"&gt; &lt;li class=\"nav-item dropdown\"&gt; &lt;a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"pageDropdown\" data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"&gt;Grouped Pages&lt;/a&gt; &lt;div class=\"dropdown-menu\" aria-labelledby=\"pageDropdown\"&gt; &lt;a class=\"dropdown-item\" href=\"{{ url('page', {action: 'home'}) }}\"&gt;Home&lt;/a&gt; &lt;a class=\"dropdown-item\" href=\"https://www.example.com/docs\"&gt;Docs&lt;/a&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" target=\"_blank\" href=\"{{ url('page', {action: 'firstLink'}) }}\"&gt;First Link&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" target=\"_blank\" href=\"https://second.example.com/\"&gt;Second Link&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; Each li element is listed as an item in the top menu. There are two different types of elements in the example: The Grouped Pages group several urls. When you click on the item, the elements grouped under it are listed and can be accessed. They can be internal and/or external links. The First Link and Second Link are regular links, one an internal link and the other an external one. You can also replace the nav-item class for the li elements with button-border for a link that looks more like a button.","title":"Edit the top menu"},{"location":"v1/how-tos/manage-assets/","text":"Manage Assets If you haven't already done so, make sure npm is installed. You can keep it running during your updates with npm run watch or run this command after the edits are completed npm run prod . What are assets? Assets are various files used by your content: Images, Fonts, JavaScript codes, SCSS. Assets source and destination The source of these files is the src/App/assets/ folder: src/App/assets/images src/App/assets/fonts src/App/assets/js src/App/assets/scss The npm script processes these files and copies or builds files under the public folder. You should not manage the items from the above folders manually. The npm script will delete/replace the files when run. While the images and fonts folders are copied as is, the js and scss are minimized: scss files are minimized under public/js/app.css . js files are minimized under public/js/app.js . The above items are by default used in the src/App/templates/layout/default.html.twig file. &lt;link href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\" /&gt; ... &lt;script src=\"{{ asset('js/app.js') }}\"&gt;&lt;/script&gt; The source and destination folders are configured in the webpack.config.js file. Browser caching of js and css One thing of note is that browsers cache the js and css files. When you push changes to one or both the files, you may notice that updating the site keeps the old version of the files. A simple solution to force the browsers to download the newer version of the files is to add a version parameter in the url. Whenever you commit changes to those files, make sure to increase the value of the v parameter. &lt;link href=\"{{ asset('css/cls_dk.css?v=3') }}\" rel=\"stylesheet\" /&gt; ... &lt;script src=\"{{ asset('js/cls_dk.js?v=5') }}\"&gt;&lt;/script&gt; The values 3 and 5 are provided as an example. The important thing is to use values for each file that you haven't used before, so incrementing the value for v is a simple way to track each change.","title":"Manage Assets"},{"location":"v1/how-tos/manage-assets/#manage-assets","text":"If you haven't already done so, make sure npm is installed. You can keep it running during your updates with npm run watch or run this command after the edits are completed npm run prod .","title":"Manage Assets"},{"location":"v1/how-tos/manage-assets/#what-are-assets","text":"Assets are various files used by your content: Images, Fonts, JavaScript codes, SCSS.","title":"What are assets?"},{"location":"v1/how-tos/manage-assets/#assets-source-and-destination","text":"The source of these files is the src/App/assets/ folder: src/App/assets/images src/App/assets/fonts src/App/assets/js src/App/assets/scss The npm script processes these files and copies or builds files under the public folder. You should not manage the items from the above folders manually. The npm script will delete/replace the files when run. While the images and fonts folders are copied as is, the js and scss are minimized: scss files are minimized under public/js/app.css . js files are minimized under public/js/app.js . The above items are by default used in the src/App/templates/layout/default.html.twig file. &lt;link href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\" /&gt; ... &lt;script src=\"{{ asset('js/app.js') }}\"&gt;&lt;/script&gt; The source and destination folders are configured in the webpack.config.js file.","title":"Assets source and destination"},{"location":"v1/how-tos/manage-assets/#browser-caching-of-js-and-css","text":"One thing of note is that browsers cache the js and css files. When you push changes to one or both the files, you may notice that updating the site keeps the old version of the files. A simple solution to force the browsers to download the newer version of the files is to add a version parameter in the url. Whenever you commit changes to those files, make sure to increase the value of the v parameter. &lt;link href=\"{{ asset('css/cls_dk.css?v=3') }}\" rel=\"stylesheet\" /&gt; ... &lt;script src=\"{{ asset('js/cls_dk.js?v=5') }}\"&gt;&lt;/script&gt; The values 3 and 5 are provided as an example. The important thing is to use values for each file that you haven't used before, so incrementing the value for v is a simple way to track each change.","title":"Browser caching of js and css"},{"location":"v1/how-tos/npm-commands/","text":"NPM Commands To install dependencies into the node_modules directory run this command. npm install If npm install fails, this could be caused by user permissions of npm. Recommendation is to install npm through Node Version Manager . The watch command compiles the components then watches the files and recompiles when one of them changes: npm run watch When you are done making changes to your code, this command compiles the assets locally, minifies them and makes them ready for production: npm run prod","title":"Use NPM Commands"},{"location":"v1/how-tos/npm-commands/#npm-commands","text":"To install dependencies into the node_modules directory run this command. npm install If npm install fails, this could be caused by user permissions of npm. Recommendation is to install npm through Node Version Manager . The watch command compiles the components then watches the files and recompiles when one of them changes: npm run watch When you are done making changes to your code, this command compiles the assets locally, minifies them and makes them ready for production: npm run prod","title":"NPM Commands"},{"location":"v1/how-tos/routing/","text":"Routing In our current implementation we are using request handlers instead of controllers in order for DotKernel to comply with the PSR-15 standard. How are we implementing handlers? Declaration of the routes and modules Currently, our structure uses modules, routes and template names. Those are being declared in the file config/autoload/local.php in the following way: 'routes' =&gt; [ 'page' =&gt; [ 'about' =&gt; 'about', 'who-we-are' =&gt; 'who-we-are', ], ], In this case page represents the module and 'about' =&gt; 'about' represents the page slug and its assigned .twig template. To clarify, this creates a route called page.about in the page module, it loads the template file src/Page/templates/page/about.html.twig and can be accessed at /page/about . With each request, when matching one of these routes, the PageHandler will detect the current route name and render the matching template. Manipulating the declared routes and modules Each module has a RoutesDelegator.php file (ex. src/Page/src/RoutesDelegator.php ). In this file we are retrieving the application config from the container and we loop over each module and their assigned routes. $routes = $container-&gt;get('config')['routes'] ?? []; foreach ($routes as $moduleName =&gt; $moduleRoutes) { foreach ($moduleRoutes as $routeUri =&gt; $templateName) { $app-&gt;get( sprintf('/%s/%s', $moduleName, $routeUri), [PageHandler::class], sprintf('%s::%s', $moduleName, $templateName) ); } }","title":"Routing"},{"location":"v1/how-tos/routing/#routing","text":"In our current implementation we are using request handlers instead of controllers in order for DotKernel to comply with the PSR-15 standard.","title":"Routing"},{"location":"v1/how-tos/routing/#how-are-we-implementing-handlers","text":"","title":"How are we implementing handlers?"},{"location":"v1/how-tos/twitter-opengraph-cards/","text":"Twitter and OpenGraph cards If you want to promote your pages on other platforms, you can post Twitter (X) and OpenGraph cards in the header section in the src/App/templates/layout/default.html.twig file. Make sure to update all items based on your page content. &lt;!-- Twitter card --&gt; &lt;meta name=\"twitter:card\" content=\"summary_large_image\"&gt; &lt;meta name=\"twitter:site\" content=\"@example\"&gt; &lt;meta name=\"twitter:title\" content=\"Page title\"&gt; &lt;meta name=\"twitter:description\" content=\"Basic description\"&gt; &lt;meta name=\"twitter:image\" content=\"{{ url('home') }}images/app/My-image.png\"&gt; &lt;meta name=\"twitter:image:alt\" content=\"Image alt\"&gt; &lt;!-- OpenGraph card --&gt; &lt;meta property=\"og:title\" content=\"Page title\"/&gt; &lt;meta property=\"og:type\" content=\"website\"/&gt; &lt;meta property=\"og:url\" content=\"{{ url('home') }}\"/&gt; &lt;meta property=\"og:image\" content=\"{{ url('home') }}images/app/My-image.png\"/&gt; &lt;meta property=\"og:description\" content=\"Basic description\"/&gt; In the example: {{ url('home') }} is the URL for the homepage, but you can also use this code to generate the url for other pages, just like in the canonical URL {% block canonical %}{{ url(routeName ?? null) }}{% endblock %} . The block item is present to mitigate for not-found pages, e.g. when the url is typed incorrectly. The image from {{ url('home') }}images/app/My-image.png is found in public/images/app/PHP-REST-API.png , but it is copied there by the npm script from src/App/assets/images/PHP-REST-API.png .","title":"Set Up Twitter and OpenGraph Cards"},{"location":"v1/how-tos/twitter-opengraph-cards/#twitter-and-opengraph-cards","text":"If you want to promote your pages on other platforms, you can post Twitter (X) and OpenGraph cards in the header section in the src/App/templates/layout/default.html.twig file. Make sure to update all items based on your page content. &lt;!-- Twitter card --&gt; &lt;meta name=\"twitter:card\" content=\"summary_large_image\"&gt; &lt;meta name=\"twitter:site\" content=\"@example\"&gt; &lt;meta name=\"twitter:title\" content=\"Page title\"&gt; &lt;meta name=\"twitter:description\" content=\"Basic description\"&gt; &lt;meta name=\"twitter:image\" content=\"{{ url('home') }}images/app/My-image.png\"&gt; &lt;meta name=\"twitter:image:alt\" content=\"Image alt\"&gt; &lt;!-- OpenGraph card --&gt; &lt;meta property=\"og:title\" content=\"Page title\"/&gt; &lt;meta property=\"og:type\" content=\"website\"/&gt; &lt;meta property=\"og:url\" content=\"{{ url('home') }}\"/&gt; &lt;meta property=\"og:image\" content=\"{{ url('home') }}images/app/My-image.png\"/&gt; &lt;meta property=\"og:description\" content=\"Basic description\"/&gt; In the example: {{ url('home') }} is the URL for the homepage, but you can also use this code to generate the url for other pages, just like in the canonical URL {% block canonical %}{{ url(routeName ?? null) }}{% endblock %} . The block item is present to mitigate for not-found pages, e.g. when the url is typed incorrectly. The image from {{ url('home') }}images/app/My-image.png is found in public/images/app/PHP-REST-API.png , but it is copied there by the npm script from src/App/assets/images/PHP-REST-API.png .","title":"Twitter and OpenGraph cards"},{"location":"v1/installation/composer/","text":"Composer Installation of Packages Composer is required to install Dotkernel Light. You can install Composer from the official site . First make sure that you have navigated your command prompt to the folder where you copied the files in the previous step. Install dependencies Run this command in the command prompt. Use the CLI in order to ensure interactivity for proper configuration. composer install You should see this text below, along with a long list of packages to be installed instead of the [...] . In this example there are 109 packages, though the number can change in future updates. You will find the packages in the vendor folder. No composer.lock file present. Updating dependencies to latest instead of installing from lock file. See https://getcomposer.org/install for more information. Loading composer repositories with package information Updating dependencies Lock file operations: 109 installs, 0 updates, 0 removals [...] Writing lock file Installing dependencies from lock file (including require-dev) Package operations: 109 installs, 0 updates, 0 removals [...] The setup script may prompt for some configuration settings, for example the lines below. If you don't see them, you can skip to the next section. Please select which config file you wish to inject 'Laminas\\HttpHandlerRunner\\ConfigProvider' into: [0] Do not inject [1] config/config.php Make your selection (default is 1): Type 0 to select [0] Do not inject . We choose 0 because Dotkernel includes its own ConfigProvider which already contains the prompted configurations. If you choose [1] config/config.php , an extra ConfigProvider will be injected. The next question is: Remember this option for other packages of the same type? (y/N) Type y here, and hit enter to complete this stage.","title":"Composer"},{"location":"v1/installation/composer/#composer-installation-of-packages","text":"Composer is required to install Dotkernel Light. You can install Composer from the official site . First make sure that you have navigated your command prompt to the folder where you copied the files in the previous step.","title":"Composer Installation of Packages"},{"location":"v1/installation/composer/#install-dependencies","text":"Run this command in the command prompt. Use the CLI in order to ensure interactivity for proper configuration. composer install You should see this text below, along with a long list of packages to be installed instead of the [...] . In this example there are 109 packages, though the number can change in future updates. You will find the packages in the vendor folder. No composer.lock file present. Updating dependencies to latest instead of installing from lock file. See https://getcomposer.org/install for more information. Loading composer repositories with package information Updating dependencies Lock file operations: 109 installs, 0 updates, 0 removals [...] Writing lock file Installing dependencies from lock file (including require-dev) Package operations: 109 installs, 0 updates, 0 removals [...] The setup script may prompt for some configuration settings, for example the lines below. If you don't see them, you can skip to the next section. Please select which config file you wish to inject 'Laminas\\HttpHandlerRunner\\ConfigProvider' into: [0] Do not inject [1] config/config.php Make your selection (default is 1): Type 0 to select [0] Do not inject . We choose 0 because Dotkernel includes its own ConfigProvider which already contains the prompted configurations. If you choose [1] config/config.php , an extra ConfigProvider will be injected. The next question is: Remember this option for other packages of the same type? (y/N) Type y here, and hit enter to complete this stage.","title":"Install dependencies"},{"location":"v1/installation/development-mode/","text":"Development mode If you're installing the project for development, make sure you have development mode enabled, by running: composer development-enable You can disable development mode by running: composer development-disable You can check if you have development mode enabled by running: composer development-status","title":"Development Mode"},{"location":"v1/installation/development-mode/#development-mode","text":"If you're installing the project for development, make sure you have development mode enabled, by running: composer development-enable You can disable development mode by running: composer development-disable You can check if you have development mode enabled by running: composer development-status","title":"Development mode"},{"location":"v1/installation/faq/","text":"Frequently Asked Questions How do I fix common permission issues? If running your project you encounter some permission issues, follow the below steps. Errors PHP Fatal error: Uncaught InvalidArgumentException: The directory \"/var/www/ example.local /html/data\" is not writable... PHP Fatal error: Uncaught InvalidArgumentException: The directory \"/var/www/ example.local /html/data/cache\" is not writable... Fix: chmod -R 777 data Error PHP Fatal error: Uncaught ErrorException: fopen(/var/www/ example.local /config/autoload/../../log/error-log- yyyy-mm-dd.log ): Failed to open stream: Permission denied... Fix: chmod -R 777 log","title":"FAQ"},{"location":"v1/installation/faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"v1/installation/faq/#how-do-i-fix-common-permission-issues","text":"If running your project you encounter some permission issues, follow the below steps.","title":"How do I fix common permission issues?"},{"location":"v1/installation/getting-started/","text":"Clone the project Recommended development environment If you are using Windows as OS on your machine, you can use WSL2 as development environment. Read more on dotkernel.com . Using your terminal, navigate inside the directory you want to download the project files into. Make sure that The directory is empty before proceeding to the download process. You will get this error if the directory is not empty fatal: destination path '.' already exists and is not an empty directory. and no files will be cloned. That you have writing permissions on the directory. Once there, run the following command: git clone https://github.com/dotkernel/light.git . If everything ran correctly, you can expect to see an output like this, though the numbers may differ. Cloning into '.'... remote: Enumerating objects: 500, done. remote: Counting objects: 100% (500/500), done. remote: Compressing objects: 100% (435/435), done. remote: Total 500 (delta 51), reused 448 (delta 27), pack-reused 0 (from 0) Receiving objects: 100% (500/500), 399.14 KiB | 3.91 MiB/s, done. Resolving deltas: 100% (51/51), done. You can already open the project in your preferred IDE to double-check the files were copied correctly.","title":"Getting Started"},{"location":"v1/installation/getting-started/#clone-the-project","text":"","title":"Clone the project"},{"location":"v1/installation/getting-started/#recommended-development-environment","text":"If you are using Windows as OS on your machine, you can use WSL2 as development environment. Read more on dotkernel.com . Using your terminal, navigate inside the directory you want to download the project files into. Make sure that The directory is empty before proceeding to the download process. You will get this error if the directory is not empty fatal: destination path '.' already exists and is not an empty directory. and no files will be cloned. That you have writing permissions on the directory. Once there, run the following command: git clone https://github.com/dotkernel/light.git . If everything ran correctly, you can expect to see an output like this, though the numbers may differ. Cloning into '.'... remote: Enumerating objects: 500, done. remote: Counting objects: 100% (500/500), done. remote: Compressing objects: 100% (435/435), done. remote: Total 500 (delta 51), reused 448 (delta 27), pack-reused 0 (from 0) Receiving objects: 100% (500/500), 399.14 KiB | 3.91 MiB/s, done. Resolving deltas: 100% (51/51), done. You can already open the project in your preferred IDE to double-check the files were copied correctly.","title":"Recommended development environment"},{"location":"v1/installation/running-the-application/","text":"Running the application We recommend running your applications in WSL: make sure you have WSL installed on your system currently we provide a distro implementations for AlmaLinux9 install the application in a virtualhost as recommended by the chosen distro set $baseUrl in config/autoload/local.php to the address of the virtualhost set the permissions for the data folder chmod -R 777 data set the permissions for the log folder chmod -R 777 log run the application by opening the virtualhost address in your browser You should see the Dotkernel Light welcome page. If you are getting exceptions or errors regarding some missing services, try running the following command: sudo php bin/clear-config-cache.php If data/cache/config-cache.php is present, that config will be loaded regardless of the ConfigAggregator::ENABLE_CACHE configuration in config/autoload/mezzio.global.php","title":"Running the Application"},{"location":"v1/installation/running-the-application/#running-the-application","text":"We recommend running your applications in WSL: make sure you have WSL installed on your system currently we provide a distro implementations for AlmaLinux9 install the application in a virtualhost as recommended by the chosen distro set $baseUrl in config/autoload/local.php to the address of the virtualhost set the permissions for the data folder chmod -R 777 data set the permissions for the log folder chmod -R 777 log run the application by opening the virtualhost address in your browser You should see the Dotkernel Light welcome page. If you are getting exceptions or errors regarding some missing services, try running the following command: sudo php bin/clear-config-cache.php If data/cache/config-cache.php is present, that config will be loaded regardless of the ConfigAggregator::ENABLE_CACHE configuration in config/autoload/mezzio.global.php","title":"Running the application"},{"location":"v1/introduction/file-structure/","text":"File structure Dotkernel Light follows the PSR-4 standards. It is a good practice to standardize the file structure of projects. When using Dotkernel Light, the following structure is installed by default: Special purpose folders .github - containes workflow files .laminas-ci - contains laminas-ci workflow files bin folder This folder contents are clear-config-cache.php - Removes the config cache file data/cache/config-cache.php ; available only when development mode is enabled config folder This folder contains all application-related config files: config.php - Registers ConfigProviders for installing packages container.php - Main service container that provides access to all registered services development.config.php.dist - Activates debug mode; gets symlinked as development.config.php when enabling development mode pipeline.php - Contains a list of middlewares, in the order of their execution twig-cs-fixer.php - Configuration file for Twig code style checker/fixer config/autoload folder This folder contains all service-related local and global config files: app.global.php - Configures basic app variables dependencies.global.php - Config file to set global dependencies that should be accessible by all modules development.local.php.dist - Gets symlinked as development.local.php when enabling development mode; activates error handlers error-handling.global.php - Configures and activates error logs local.php.dist - Local config file where you can overwrite application name and URL mezzio.global.php - Mezzio core config file templates.global.php - mezzio/mezzio-twigrenderer config file data/cache folder This folder is a storage for service caches. log folder This folder stores daily log files. When you access the application from the browser, (if not already created) a new log file gets created in the format specified in the config/autoload/error-handling.global.php config file under the stream array key. public folder This folder contains all publicly available assets and serves as the entry point of the application: css and js - Contains the css and js file(s) generated by the webpack (npm) from the assets folder fonts and images - Contain the font and image file(s) copied by the webpack (npm) from the assets folder .htaccess - server configuration file used by Apache web server; it enables the URL rewrite functionality index.php - the application's main entry point robots.txt.dist - a sample robots.txt file that allows/denies bot access to certain areas of your application; activate it by duplicating the file as robots.txt and comment out the lines that don't match your environment src directory This folder contains a separate folder for each Module. These are the modules included by default: App - Core functionality, from rendering, to error reporting Page - Contains functionality for displaying a page Module contents Each Module folder, in turn, should contain the following folders, unless they are empty: src/Factory - Factories which provide handler/service dependencies src/Handler - Request handlers src/Service - Service classes The src folder in each Module folder normally also contains these files: ConfigProvider.php - Configuration data for the module RoutesDelegator.php - Module specific route registrations templates directory for modules This directory contains the template files. Twig is used as templating engine. All template files have the extension .html.twig .","title":"File Structure"},{"location":"v1/introduction/file-structure/#file-structure","text":"Dotkernel Light follows the PSR-4 standards. It is a good practice to standardize the file structure of projects. When using Dotkernel Light, the following structure is installed by default:","title":"File structure"},{"location":"v1/introduction/file-structure/#special-purpose-folders","text":".github - containes workflow files .laminas-ci - contains laminas-ci workflow files","title":"Special purpose folders"},{"location":"v1/introduction/file-structure/#bin-folder","text":"This folder contents are clear-config-cache.php - Removes the config cache file data/cache/config-cache.php ; available only when development mode is enabled","title":"bin folder"},{"location":"v1/introduction/file-structure/#config-folder","text":"This folder contains all application-related config files: config.php - Registers ConfigProviders for installing packages container.php - Main service container that provides access to all registered services development.config.php.dist - Activates debug mode; gets symlinked as development.config.php when enabling development mode pipeline.php - Contains a list of middlewares, in the order of their execution twig-cs-fixer.php - Configuration file for Twig code style checker/fixer","title":"config folder"},{"location":"v1/introduction/file-structure/#datacache-folder","text":"This folder is a storage for service caches.","title":"data/cache folder"},{"location":"v1/introduction/file-structure/#log-folder","text":"This folder stores daily log files. When you access the application from the browser, (if not already created) a new log file gets created in the format specified in the config/autoload/error-handling.global.php config file under the stream array key.","title":"log folder"},{"location":"v1/introduction/file-structure/#public-folder","text":"This folder contains all publicly available assets and serves as the entry point of the application: css and js - Contains the css and js file(s) generated by the webpack (npm) from the assets folder fonts and images - Contain the font and image file(s) copied by the webpack (npm) from the assets folder .htaccess - server configuration file used by Apache web server; it enables the URL rewrite functionality index.php - the application's main entry point robots.txt.dist - a sample robots.txt file that allows/denies bot access to certain areas of your application; activate it by duplicating the file as robots.txt and comment out the lines that don't match your environment","title":"public folder"},{"location":"v1/introduction/file-structure/#src-directory","text":"This folder contains a separate folder for each Module. These are the modules included by default: App - Core functionality, from rendering, to error reporting Page - Contains functionality for displaying a page","title":"src directory"},{"location":"v1/introduction/packages/","text":"Packages dotkernel/dot-errorhandler - Logging Error Handler for Middleware Applications laminas/laminas-component-installer - Composer plugin for injecting modules and configuration providers into application configuration laminas/laminas-config-aggregator - Lightweight library for collecting and merging configuration from different sources mezzio/mezzio - PSR-15 Middleware Microframework mezzio/mezzio-fastroute - FastRoute integration for Mezzio mezzio/mezzio-twigrenderer - Twig integration for Mezzio","title":"Packages"},{"location":"v1/introduction/packages/#packages","text":"dotkernel/dot-errorhandler - Logging Error Handler for Middleware Applications laminas/laminas-component-installer - Composer plugin for injecting modules and configuration providers into application configuration laminas/laminas-config-aggregator - Lightweight library for collecting and merging configuration from different sources mezzio/mezzio - PSR-15 Middleware Microframework mezzio/mezzio-fastroute - FastRoute integration for Mezzio mezzio/mezzio-twigrenderer - Twig integration for Mezzio","title":"Packages"},{"location":"v1/introduction/server-requirements/","text":"Server Requirements For production, we highly recommend a *nix based system. Webserver Apache &gt;= 2.2 mod_rewrite .htaccess support (AllowOverride All) The repository includes a default .htaccess file in the public folder. Nginx You need to convert the provided Apache related .htaccess file into Nginx configuration instructions. PHP: 8.2, 8.3 or 8.4 Both mod_php and FCGI (FPM) are supported. Required Settings and Modules &amp; Extensions memory_limit &gt;= 128M mbstring Composer (added to $PATH) Recommended extensions opcache dom - if working with markup files structure (html, xml etc.) simplexml - working with xml files gd, exif - if working with images zlib, zip, bz2 - if compressing files curl (required if APIs are used)","title":"Server Requirements"},{"location":"v1/introduction/server-requirements/#server-requirements","text":"For production, we highly recommend a *nix based system.","title":"Server Requirements"},{"location":"v1/introduction/server-requirements/#webserver","text":"","title":"Webserver"},{"location":"v1/introduction/server-requirements/#php-82-83-or-84","text":"Both mod_php and FCGI (FPM) are supported.","title":"PHP: 8.2, 8.3 or 8.4"},{"location":"v1/introduction/server-requirements/#required-settings-and-modules-extensions","text":"memory_limit &gt;= 128M mbstring Composer (added to $PATH)","title":"Required Settings and Modules &amp; Extensions"},{"location":"v1/introduction/server-requirements/#recommended-extensions","text":"opcache dom - if working with markup files structure (html, xml etc.) simplexml - working with xml files gd, exif - if working with images zlib, zip, bz2 - if compressing files curl (required if APIs are used)","title":"Recommended extensions"}]}